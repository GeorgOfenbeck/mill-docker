import $ivy.`com.ofenbeck::mill-docker_mill0.11:0.0.3`
import java.nio.file.Path
import mill._
import mill.scalalib._
import os._
import coursier.maven.MavenRepository
import com.google.cloud.tools.jib.api._
import com.google.cloud.tools.jib.api.buildplan._
import scala.jdk.CollectionConverters._
import scala.jdk.OptionConverters.RichOption

import java.time.Instant
import java.nio.file.{Files, Path}
import com.ofenbeck.mill.docker._

/** Usage

> ./mill project.docker.buildImage
...Loaded image: ofenbeck/customlayerbuild:local...
...

*/



object project extends ScalaModule with DockerJibModule {
  def scalaVersion = "3.3.3"

  object docker extends DockerConfig {

    import com.ofenbeck.mill.docker._

    override def sourceImage = JibImage.RegistryImage("eclipse-temurin:21")

    override def targetImage =
      JibImage.DockerDaemonImage("ofenbeck/customlayerbuild:local")

    def downloadAzureAgent: T[PathRef] = T {
      val azureAgentUrl =
        "https://github.com/microsoft/ApplicationInsights-Java/releases/download/3.6.1/applicationinsights-agent-3.6.1.jar"
      val taskDownloadDir = Task.ctx().dest
      val dest: os.Path = taskDownloadDir / "applicationinsights-agent-3.6.1.jar"
      val in            = new java.net.URL(azureAgentUrl).openStream()
      try
        Files.copy(in, dest.wrapped, java.nio.file.StandardCopyOption.REPLACE_EXISTING)
      finally
        in.close()
      PathRef(taskDownloadDir)
    }

    /** Hook to modify the JibContainerBuilder before it is used to build the container. An "empty" JibContainerBuilder
      * is passed to the hook (from the configured SoureImage). In addition the FileEntriesLayer and the entrypoints of
      * a default JavaBuild are passed to the hook. You have to add both again to the "empty" JibContainerBuilder to get
      * the same behavior as the default JavaBuild.
      * @return
      *   The return value is used for further processing of the JibContainerBuilder - so full replacement is possible.
      */

    /** We overload the getJibBuilder method to customize the layers of the container
      * In the CustomJibBuild example found at (../examples/examples-customjibbuild)
      * we are simply reusing the default layers and entrypoints by calling super.getJibBuilder()
      * 
      * Here we are customizing the layers by dropping the dependencies layer and hence fully overload the super method
      * without calling it 
      */
    override def getJibBuilder: Task[JibContainerBuilder] = Task {

      //this takes the default JavaContainerBuilder
      val javaBuilder = getJavaBuilder()
      val jibBuilder  = javaBuilder.toContainerBuilder()
      val buildConf   = buildSettings()
      val logger      = Task.ctx().log

      val (emptyJibBuilder, jiblayers, entrypoints) = MDBuild.customizeLayers(jibBuilder, buildConf, logger)
      
      //This is the difference to the default (super) version - we actually drop one of the layers 
      jiblayers.filter(_.getName() != "dependencies").map(emptyJibBuilder.addFileEntriesLayer)
      
      
      emptyJibBuilder.setEntrypoint(entrypoints.asJava)
    }
  

  }
}
