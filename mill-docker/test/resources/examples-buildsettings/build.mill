import java.nio.file.Path
import $ivy.`com.ofenbeck::mill-docker_mill0.11:0.0.1`
import mill._
import mill.scalalib._
import os._
import coursier.maven.MavenRepository

import com.ofenbeck.mill.docker._


/** Usage

> ./mill project.docker.buildImage
...Pushing manifest for arm...
...

*/

object project extends ScalaModule with DockerJibModule {
  def scalaVersion = "3.3.3"

  val sonatypeReleases = Seq(
    MavenRepository("https://oss.sonatype.org/content/repositories/snapshots"),
  )

  def repositoriesTask = T.task {
    super.repositoriesTask() ++ sonatypeReleases
  }

  override def resources: T[Seq[PathRef]] = T.sources {
    Seq(
      millSourcePath / "resources",
      millSourcePath / "additional" / "resources",
    ).map(PathRef(_))
  }

  override def ivyDeps = super.ivyDeps() ++ Agg(
    ivy"com.lihaoyi::scalatags:0.13.1",
    ivy"com.lihaoyi::os-lib:0.11.2",
    ivy"org.scrupal:chill-java:0.7.0-SNAPSHOT", // random snapshot dependency
  )

  override def compileIvyDeps = Agg(
    ivy"com.softwaremill.macwire::macros:2.6.4",
  )

  override def unmanagedClasspath = T {
    super.unmanagedClasspath() ++
      Agg.from(os.list(millSourcePath / "unmanaged")).map(PathRef(_))

  }

  object docker extends DockerConfig {

    import com.ofenbeck.mill.docker._

    override def sourceImage = JibImage.RegistryImage("eclipse-temurin:21")

    override def targetImage = JibImage.RegistryImage("ofenbeck/javabuildsettings:arm", Some(("DOCKER_USERNAME", "DOCKER_PASSWORD")))

    override def labels = T {
      Map(
        "com.ofenbeck.mill.docker"         -> "javaBuildSettings",
        "com.ofenbeck.mill.docker.version" -> "0.0.5",
      )
    }

    override def jvmOptions = T {
      Seq("-Xmx1024M", "-agentlib:jdwp=transport=dt_socket,server=y,address=8000")
    }

    override def exposedPorts = T {
      Seq(8080, 8081)
    }

    override def exposedUdpPorts = T {
      Seq(8082, 8083)
    }

    override def envVars = T {
      Map(
        "JAVA_OPTS"             -> "-Xmx1024M",
        "JAVA_TOOL_OPTIONS_XXX" -> "-agentlib:jdwp=transport=dt_socket,server=y,address=8000",
      )
    }

    override def user = T {
      Some("1000")
    }

    override def platforms = T {
      Set(Platform("linux", "arm64"))
    }

    override def entrypoint = T {
      Seq(
        "sh",
        "-c",
        "java -cp /app/libs/*:/app/resources:/app/classes:/app/dependency/* com.ofenbeck.main & tail -f /dev/null",
      )
    }


  }
}

