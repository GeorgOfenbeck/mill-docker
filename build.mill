package build
import mill._, scalalib._, publish._
import mill.util.BuildInfo.{millBinPlatform, millVersion}

object versions {
  val jibCore = "0.27.2"
}

object `mill-docker` extends ScalaModule with PublishModule with SonatypeCentralPublishModule {

  def scalaVersion: T[String] = "3.7.1"

  // Set the `platformSuffix` so the name indicates what Mill version it is compiled for
  def platformSuffix = s"_mill$millBinPlatform"

  override def publishVersion: T[String] = "0.1.0"

  override def mvnDeps = super.mvnDeps() ++ Seq(
    mvn"com.lihaoyi::mill-libs-scalalib:$millVersion",
    mvn"com.google.cloud.tools:jib-core:${versions.jibCore}",
  )

  def pomSettings = PomSettings(
    description = "A docker plugin for the Mill build tool",
    organization = "com.ofenbeck",
    url = "https://github.com/georgofenbeck/mill-docker",
    licenses = Seq(License.MIT),
    versionControl = VersionControl.github("georgofenbeck", "mill-docker"),
    developers = Seq(Developer("georgofenbeck", "Georg Ofenbeck", "https://github.com/georgofenbeck")),
  )

  // Testing Config, with necessary setup for unit/integration/example tests
  object test extends ScalaTests with TestModule.Utest {
    def mvnDeps = Seq(
      mvn"com.lihaoyi::mill-testkit:$millVersion",
      mvn"com.google.cloud.tools:jib-core:${versions.jibCore}",
    )

    def forkEnv = Task {
      val artifact = s"${`mill-docker`.pomSettings().organization}-${`mill-docker`.artifactId()}"
        .replaceAll("[.-]", "_")
        .toUpperCase

      val localClasspathString = `mill-docker`.localClasspath().map(_.path).mkString("\n")
      Map(
        "MILL_EXECUTABLE_PATH"                -> millExecutable.assembly().path.toString,
        s"MILL_LOCAL_TEST_OVERRIDE_$artifact" -> localClasspathString,
      )
    }

    // Create a Mill executable configured for testing our plugin
    object millExecutable extends JavaModule {
      def mvnDeps = Seq(
        mvn"com.lihaoyi:mill-runner-launcher_3:$millVersion",
        mvn"com.google.cloud.tools:jib-core:${versions.jibCore}",
      )
      def mainClass = Some("mill.launcher.MillLauncherMain")
    }
  }
}
