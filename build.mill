package build
import mill._, scalalib._, publish._

object versions {
  val millVersions = Seq("1.0.0")
  val jibCore      = "0.27.2"
}

object `mill-docker` extends ScalaModule with PublishModule with SonatypeCentralPublishModule {

  def millVersion = versions.millVersions.head
  def scalaVersion: T[String] = "3.7.1"

  // Set the `platformSuffix` so the name indicates what Mill version it is compiled for
  def platformSuffix = "_mill1.0.0"

  override def publishVersion: T[String] = "0.0.3"

  override def mvnDeps = super.mvnDeps() ++ Seq(
    mvn"com.lihaoyi::mill-libs-scalalib:$millVersion",
    mvn"com.google.cloud.tools:jib-core:${versions.jibCore}",
  )

  def pomSettings = PomSettings(
    description = "A docker plugin for the Mill build tool",
    organization = "com.ofenbeck",
    url = "https://github.com/georgofenbeck/mill-docker",
    licenses = Seq(License.MIT),
    versionControl = VersionControl.github("georgofenbeck", "mill-docker"),
    developers = Seq(Developer("georgofenbeck", "Georg Ofenbeck", "https://github.com/georgofenbeck")),
  )

  // Testing Config, with necessary setup for unit/integration/example tests
  object test extends ScalaTests with TestModule.Utest {
    def mvnDeps = Seq(
      mvn"com.lihaoyi::mill-testkit:$millVersion",
    )
    
    def forkEnv = Map(
      "MILL_EXECUTABLE_PATH" -> millExecutable.assembly().path.toString,
      s"MILL_LOCAL_TEST_OVERRIDE_com.ofenbeck-mill-docker_mill1.0.0" -> `mill-docker`.localClasspath().map(_.path).mkString(",")
    )

    // Create a Mill executable configured for testing our plugin
    object millExecutable extends ScalaModule {
      def scalaVersion = `mill-docker`.scalaVersion
      def mvnDeps = Seq(
        mvn"com.lihaoyi::mill-libs-scalalib:$millVersion",
        mvn"com.google.cloud.tools:jib-core:${versions.jibCore}",
      )
      def mainClass = Some("mill.runner.client.MillClientMain")
    }
  }
}